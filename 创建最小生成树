#include <iostream>
#include <algorithm>
#include <cstdio>
#define MAX_VEX 100
#define INF 65535

using namespace std;

struct Graph{
    char vexs[MAX_VEX];
    int arc[MAX_VEX][MAX_VEX];
    int numvex,numarc;
};

struct Edge{
    int beg,des,wei;
};

void CreateGraph(Graph &G){
    int vi, vj, w;
    cout << "please enter the number of vertexes and arcs : \n";
    cin >> G.numvex >> G.numarc;
    for(int i = 0; i < G.numvex; i++){
        printf("please input the NO.%d name of vex :",i+1);
        cin >> G.vexs[i];
    }
    for(int i = 0; i < G.numvex; i++){
        for(int j = 0; j < G.numvex ;j++){
             G.arc[i][j] = INF;
        }
    }
    cout << endl;
    for(int i = 0; i < G.numarc; i++){
        cout << "Enter the subscripts and weights from vertex vi to vertex vj : ";
        cin >> vi >> vj >> w;
        G.arc[vi][vj] = w;
        G.arc[vj][vi] = w;
    }
}

void DispalyGraph(Graph G){
    for(int i = 0; i < G.numvex; i++) cout << G.vexs[i];
    cout << endl;
    for(int i = 0; i < G.numvex; i++){
        for(int j = 0; j < G.numvex; j++){
            if(G.arc[i][j] == INF) printf("%6s", "âˆž");
            else printf("%6d", G.arc[i][j]);
        }
        cout << endl;
    }
}

bool cmp(Edge a ,Edge b){
    return a.wei < b.wei;
}

int Find(int parent [],int f){
    while(parent[f] > 0) f = parent[f];
    return f;
}

void Kruskal(Graph G){
    Edge e[MAX_VEX];
    int parent[MAX_VEX], k = 0, m ,n;
    for(int i = 0; i < G.numvex; i++){
        for(int j = 0; j < G.numvex; j++){
            if(G.arc[i][j] != 0 && G.arc[i][j] != INF){
                e[k].beg = i; e[k].des = j; e[k].wei = G.arc[i][j];
                k++;
            }
        }
    }
    sort(e,e+k,cmp);
    for(int i = 0; i < k; i++) parent[i] = 0;
    cout << "Kruskal:\n";
    for(int i = 0; i < k; i++){
        m = Find(parent,e[i].beg);
        n = Find(parent,e[i].des);
        if(m != n){
            parent[m] = n;
            printf("%d %d %d \n", e[i].beg, e[i].des, e[i].wei);
        }
    }
}

int main(){
    Graph G;
    CreateGraph(G);
    DispalyGraph(G);
    Kruskal(G);
    return 0;
}
/*
0 1 50 
0 2 60 
1 3 65
2 3 52
2 6 45
3 6 42 
1 4 40
3 4 50 
4 5 70
3 5 30

*/
